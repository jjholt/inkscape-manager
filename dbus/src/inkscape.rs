//! # DBus interface proxies for: `org.gtk.Actions`, `org.gtk.Application`, `org.freedesktop.Application`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `inkscape.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.gtk.Actions", assume_defaults = true)]
trait Actions {
    /// Activate method
    fn activate(
        &self,
        action_name: &str,
        parameter: &[zbus::zvariant::Value<'_>],
        platform_data: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Describe method
    fn describe(
        &self,
        action_name: &str,
    ) -> zbus::Result<(
        bool,
        zbus::zvariant::OwnedSignature,
        Vec<zbus::zvariant::OwnedValue>,
    )>;

    /// DescribeAll method
    fn describe_all(
        &self,
    ) -> zbus::Result<
        std::collections::HashMap<
            String,
            (
                bool,
                zbus::zvariant::OwnedSignature,
                Vec<zbus::zvariant::OwnedValue>,
            ),
        >,
    >;

    /// List method
    fn list(&self) -> zbus::Result<Vec<String>>;

    /// SetState method
    fn set_state(
        &self,
        action_name: &str,
        value: &zbus::zvariant::Value<'_>,
        platform_data: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Changed signal
    #[dbus_proxy(signal)]
    fn changed(
        &self,
        removals: &[&str],
        enable_changes: std::collections::HashMap<&str, bool>,
        state_changes: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        additions: std::collections::HashMap<
            &str,
            (
                bool,
                zbus::zvariant::Signature<'_>,
                &[zbus::zvariant::Value<'_>],
            ),
        >,
    ) -> zbus::Result<()>;
}
